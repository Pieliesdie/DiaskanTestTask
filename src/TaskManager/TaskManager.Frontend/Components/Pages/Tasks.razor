@page "/"

@using System.Collections.ObjectModel
@using TaskManager.Common.Models.Tasks
@using TaskManager.Frontend.Mappers
@using TaskManager.Frontend.Models
@using TaskManager.Frontend.Services
@inject ITasksApi TasksApi
@inject ISnackbar Snackbar
@inject TaskMapper TaskMapper

<PageTitle>Tasks</PageTitle>
<MudPaper Class="pa-4 mb-5">
    <MudTextField Class="mb-5" @bind-Value="filterText" Placeholder="Search by Name" Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"/>
    <MudStack Row="true">
        <MudSelect Class="mb-5" @bind-Value="sortBy" Label="Sort By">
            <MudSelectItem Value="@("Name")">Name</MudSelectItem>
            <MudSelectItem Value="@("Deadline")">Deadline</MudSelectItem>
            <MudSelectItem Value="@("CreationDate")">Creation Date</MudSelectItem>
        </MudSelect>

        <MudSelect Class="mb-5" @bind-Value="sortOrder" Label="Sort Order">
            <MudSelectItem Value="@("Ascending")">Ascending</MudSelectItem>
            <MudSelectItem Value="@("Descending")">Descending</MudSelectItem>
        </MudSelect>
    </MudStack>
    <MudButton
        Class="mb-5"
        StartIcon="@Icons.Material.Filled.Add"
        Variant="Variant.Filled"
        Color="Color.Primary"
        @onclick="AddNewTask">
        Add new task
    </MudButton>
</MudPaper>
<MudText Typo="Typo.h3" Align="Align.Center">Tasks</MudText>
<MudSpacer/>
@if (tasks == null)
{
    <p>Loading tasks...</p>
}
else
{
    <ul>
        @foreach (var task in FilterAndSortTasks())
        {
            <li>
                <div style="margin-bottom: 1rem; border: 1px solid #ccc; padding: 1rem; border-radius: 5px;">
                    <MudTextField T="string" Label="Name" @bind-Value="task.Name" Immediate="true"/>
                    <MudTextField T="string" Label="Description" @bind-Value="task.Description" Immediate="true"/>
                    <MudCheckBox T="bool" Label="Is Completed" @bind-Value="@task.IsCompleted"/>
                    <MudStack Row="true">
                        <MudDatePicker Label="Creation Date" Date="@task.CreationDate"
                                       Disabled="true"/>

                        <MudDatePicker Label="Completion Date" Date="@task.CompletionDate"
                                       Disabled="true"/>

                        <MudDatePicker Label="Deadline"
                                       Date="task.Deadline"
                                       DateChanged="@(newDate => { task.Deadline = newDate ?? default; })"/>
                        <MudTextField T="string" Label="Category" @bind-Value="task.Category" Immediate="true"/>

                        <MudSelect @bind-Value="task.Priority" Label="Priority">
                            @foreach (Priority priority in Enum.GetValues(typeof(Priority)))
                            {
                                <MudSelectItem Value="@priority">@priority</MudSelectItem>
                            }
                        </MudSelect>
                    </MudStack>
                    <div class="mt-4">
                        <MudTextField Label="Add Tag" @bind-Value="task.NewTag" Placeholder="Enter a tag" />
                        <MudButton OnClick="@(() => AddTag(task))" StartIcon="@Icons.Material.Filled.Add">Add Tag</MudButton>

                        <MudChipSet T="string">
                            @foreach (var tag in task.Tags)
                            {
                                <MudChip Text="@tag" OnClose="@((MudChip<string> _) => RemoveTag(task, tag))" />
                            }
                        </MudChipSet>
                    </div>
                    <MudStack Row="true" Class="mt-5 mb-5">
                        <MudButton Class="mr-5" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save"
                                   Color="Color.Primary"
                                   @onclick="async() => await SaveTask(task)">Save task
                        </MudButton>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   @onclick="() => DeleteTask(task.Id)">Delete task
                        </MudButton>
                    </MudStack>
                </div>
            </li>
        }
    </ul>
}

@code {
    private ObservableCollection<TaskViewModel>? tasks;
    private string filterText = string.Empty;
    private string sortBy = "Name";
    private string sortOrder = "Ascending";

    private async Task<ObservableCollection<TaskViewModel>> GetTasks()
    {
        var tasks = (await TasksApi.GetAllTasksAsync()).Select(TaskMapper.ToViewModel);
        return new ObservableCollection<TaskViewModel>(tasks.ToList());
    }

    protected override async Task OnInitializedAsync()
    {
        tasks = await GetTasks();
    }
    
    private void AddTag(TaskViewModel task)
    {
        if (string.IsNullOrWhiteSpace(task.NewTag) || task.Tags.Contains(task.NewTag)) return;
        task.Tags.Add(task.NewTag);
        task.NewTag = string.Empty;
    }

    private void RemoveTag(TaskViewModel task, string tag)
    {
        task.Tags.Remove(tag);
    }
    
    private async Task SaveTask(TaskViewModel task)
    {
        try
        {
            var taskToSave = TaskMapper.FromViewModel(task);
            await TasksApi.UpdateTaskAsync(taskToSave);
            Snackbar.Add($"Task {task.Name} updated.", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error {e}.", Severity.Error);
        }
    }

    private async Task AddNewTask()
    {
        try
        {
            var newTask = new TaskClientDto
            {
                Name = "New Task",
                Deadline = DateTime.Now.AddDays(7)
            };
            await TasksApi.CreateTaskAsync(newTask);
            tasks = await GetTasks();
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error {e}.", Severity.Error);
        }
    }

    private async Task DeleteTask(Guid id)
    {
        try
        {
            await TasksApi.DeleteTaskAsync(id);
            tasks = await GetTasks();
            Snackbar.Add($"Task {id} deleted.", Severity.Success, config =>
            {
                config.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow;
            });
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error {e}.", Severity.Error);
        }
    }

    private IEnumerable<TaskViewModel> FilterAndSortTasks()
    {
        var filteredTasks = string.IsNullOrWhiteSpace(filterText)
            ? tasks
            : tasks?.Where(t => t.Name.Contains(filterText, StringComparison.OrdinalIgnoreCase));

        return (sortOrder == "Ascending"
                ? filteredTasks?.OrderBy(GetSortPropertyValue)
                : filteredTasks?.OrderByDescending(GetSortPropertyValue))
            ?? Enumerable.Empty<TaskViewModel>();
    }

    string GetSortPropertyValue(TaskViewModel model)
    {
        return sortBy switch
        {
            "Name" => model.Name,
            "Deadline" => model.Deadline.ToString("yyyy-MM-ddThh:mm:ss"),
            "CreationDate" => model.CreationDate.ToString("yyyy-MM-ddThh:mm:ss"),
            _ => model.Name,
        };
    }

}